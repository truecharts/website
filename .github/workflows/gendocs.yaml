name: Generate Documentation

concurrency:
  group: gen-docs
on: # yamllint disable-line rule:truthy
  workflow_dispatch:
  schedule:
    - cron: "0 3 * * *"


jobs:
  deploy:
    name: Generate-Docs
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/truecharts/devcontainer:3.1.10@sha256:c239addf725eb5cedf79517f8089fdafdc32b5270d1893ee87ae6e511b9bcae3
    steps:
      - name: Install Kubernetes tools
        uses: yokawasa/action-setup-kube-tools@af4ebb1af1efd30c5bd84a2e9773355ad6362a33 # v0.9.3
        with:
          setup-tools: |
            helmv3
          helm: "3.8.0"

      - name: Prep Helm
        run: |
          helm repo add truecharts https://charts.truecharts.org
          helm repo add truecharts-library https://library-charts.truecharts.org
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm repo add metallb https://metallb.github.io/metallb
          helm repo add grafana https://grafana.github.io/helm-charts
          helm repo add prometheus https://prometheus-community.github.io/helm-charts
          helm repo update

      - name: Checkout
        uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3
        with:
          repository: truecharts/apps
          path: charts
          fetch-depth: 1
          token: ${{ secrets.BOT_TOKEN }}

      - name: Security Scan
        shell: bash
        run: |
          helm_dep() {
              helm dependency update "${1}" --skip-refresh || (sleep 10 && helm dependency update "${1}" --skip-refresh) || (sleep 10 && helm dependency update "${1}" --skip-refresh)
              }
          export -f helm_dep

          scan_prep() {
              local chart="$1"
              local chartname="$(basename ${chart})"
              local train="$(basename $(dirname "${chart}"))"
              echo "Preparing security scans for: ${chartname}"
              mkdir -p ${chart}/render
              rm -rf ${chart}/security.md || echo "removing old security.md file failed..."
              cat charts/templates/security.tpl >> ${chart}/security.md
              echo "" >> ${chart}/security.md
              helm template ${chart} --output-dir ${chart}/render > /dev/null || (  echo "helm templating failed..." && return 1 )
              }
           export -f scan_prep

          helm_sec_scan() {
              local chart="$1"
              local chartname="$(basename ${chart})"
              local train="$(basename $(dirname "${chart}"))"
              echo "Running Helm security scan for: ${chartname}"
              trivy config -f template --template "@./charts/templates/trivy-config.tpl" -o ${chart}/render/tmpsec${chartname}.md ${chart}/render
              rm -rf ${chart}/render/tmpsec${chartname}.md || true
              echo "" >> ${chart}/security.md
              }
           export -f helm_sec_scan

          container_sec_scan() {
              local chart="$1"
              local chartname="$(basename ${chart})"
              local train="$(basename $(dirname "${chart}"))"
              echo "Scanning container security for ${chartname}"
              echo "## Containers" >> ${chart}/security.md
              echo "" >> ${chart}/security.md
              echo "### Detected Containers" >> ${chart}/security.md
              echo "" >> ${chart}/security.md
              find ./${chart}/render/ -name '*.yaml' -type f -exec cat {} \; | grep image: | sed "s/image: //g" | sed "s/\"//g" >> ${chart}/render/containers.tmp
              cat ${chart}/render/containers.tmp >> ${chart}/security.md
              echo "" >> ${chart}/security.md
              echo "### Scan Results" >> ${chart}/security.md
              echo "" >> ${chart}/security.md
              for container in $(cat ${chart}/render/containers.tmp); do
                echo "processing container: ${container}"
                echo "" >> ${chart}/security.md
                trivy image --security-checks vuln -f template --template "@./charts/templates/trivy-container.tpl" -o ${chart}/render/tmpsec${chartname}.md "${container}"
                cat ${chart}/render/tmpsec${chartname}.md >> ${chart}/security.md
                rm -rf ${chart}/render/tmpsec${chartname}.md || true
                echo "" >> ${chart}/security.md
              done
              }
           export -f container_sec_scan
          finish_sec() {
              local chart="$1"
              local chartname="$(basename ${chart})"
              local train="$(basename $(dirname "${chart}"))"
              sed -i 's;<br>;<br />;g' ${chart}/security.md
              }
           export -f finish_sec

          run_scans() {
              local chart="$1"
              local chartname="$(basename ${chart})"
              helm_dep ${chart}
              scan_prep ${chart} || (  echo "Security prep failed..." && return 0 )
              helm_sec_scan ${chart} || (  echo "Helm Security Scan failed..." && return 0 )
              container_sec_scan ${chart} || (  echo "Container Security Scan failed..." && return 0 )
              finish_sec ${chart} || (  echo "Container Security Scan failed..." && return 0 )
              }
           export -f run_scans

          parthreads=$(($(nproc) * 2))
          ## Disabled due to overloading the website (OOM issues)
          # parallel -j ${parthreads} run_scans '2>&1' ::: charts/charts/**/*



      - uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3
        name: Checkout Website
        with:
          fetch-depth: 1
          token: ${{ secrets.BOT_TOKEN }}
          path: website


      - name: Copy Chart Docs
        shell: bash
        run: |
          copy_docs() {
              local chart="$1"
              local chartname="$(basename ${chart})"
              local train="$(basename $(dirname "${chart}"))"
              if [ -d "website/docs/charts/${train}/${chartname}" ]; then
                rm website/docs/charts/${train}/${chartname}/security.md || true
                cp -rf ${chart}/security.md website/docs/charts/${train}/${chartname}/security.md || true
              else
                  echo "Cannot copy docs, Chart folder does not exist on website..."
              fi
              }
           export -f copy_docs

          parthreads=$(($(nproc) * 2))
          ## Disabled due to overloading the website (OOM issues)
          # parallel -j ${parthreads} copy_docs '2>&1' ::: charts/charts/**/*

      - name: Copy Single File Docs
        shell: bash
        run: |
          copy_single_doc() {
            local docsource="$1"
            local doctarget="$2"
            local dirtarget
            dirtarget="$(dirname "${doctarget}")"

            if [ -d "${dirtarget}" ]; then
              echo "Copying $docsource to $doctarget ..."
              cp -f "$docsource" "$doctarget" || true
            else
              echo "Cannot copy doc file, <$dirtarget> does not exist on website..."
            fi;
            }
          export -f copy_single_doc

          copy_single_doc "charts/.github/SUPPORT.md" "website/docs/manual/SUPPORT.md"

      - name: Create commit
        uses: stefanzweifel/git-auto-commit-action@3ea6ae190baf489ba007f7c92608f33ce20ef04a # tag=v4
        with:
          file_pattern: docs/charts/**/
          commit_message: "chore: Auto-update chart docs"
          commit_user_name: truecharts-bot
          commit_user_email: bot@truecharts.org
          commit_author: truecharts-bot <bot@truecharts.org>
          repository: ./website

      - uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3
        name: Checkout Containers
        with:
          repository: truecharts/containers
          fetch-depth: 1
          token: ${{ secrets.BOT_TOKEN }}
          path: containers

      - name: Generate Index Files
        shell: bash
        run: |
          generate_index_files() {
              echo "Generating Documentation Indexes..."
              TRAINS_PATH="./charts/charts"
              IMAGE_PATH="./containers/mirror"
              docgenerator
              }
           export -f generate_index_files
          generate_index_files
          mv -f website/docs/charts/description_list.md website/docs/charts/_description_list.md || echo "disabling description list failed"
          mv -f website/docs/charts/default_port_list.md website/docs/charts/_default_port_list.md || echo "disabling ports list failed"
          mv -f website/docs/charts/volume_list.md website/docs/charts/_volume_list.md || echo "disabling volume list failed"
          ls -l /__w/website/website/website/docs/charts/

      - name: Create commit
        uses: stefanzweifel/git-auto-commit-action@3ea6ae190baf489ba007f7c92608f33ce20ef04a # tag=v4
        with:
          commit_message: "chore: Auto-update chart docs"
          commit_user_name: truecharts-bot
          commit_user_email: bot@truecharts.org
          commit_author: truecharts-bot <bot@truecharts.org>
          repository: ./website
